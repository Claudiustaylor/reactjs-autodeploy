version: 2.1
orbs:
  slack: circleci/slack@4.2.0
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            SUCCESS=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET \
                https://api.memstash.io/values/migrations-<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend &&\
            npm i &&\
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend &&\
            npm i &&\
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test.
          command: |
            cd frontend
            npm audit fix
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test.
          command: |
            cd backend
            npm audit fix
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend.
          command: |
            cd frontend
            npm audit --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: C01LUFSU1QR
          event: fail
          mentions: "@here"
          template: basic_fail_1
      - slack/notify:
          channel: C01LUFSU1QR
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend.
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C01LUFSU1QR
          event: fail
          mentions: "@here"
          template: basic_fail_1
      - slack/notify:
          channel: C01LUFSU1QR
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:4} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:4}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:4}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:4}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text` \
              https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
              echo URL: https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
              echo Token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - slack/notify:
          branch_pattern: main
          channel: C01LUFSU1QR
          event: fail
          # mentions: "@here"
          template: basic_fail_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["6c:7a:de:44:06:67:79:b5:50:99:0f:8e:58:6f:d3:92"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Check there is .env file at workspace.
          command: cat backend/.env
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 7m
          command: |
            cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "success" migrations-${CIRCLE_WORKFLOW_ID}.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data '1' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:4}
            else
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data '0' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:4}
            fi
            echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:4}
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            echo "${API_URL}"
            cd frontend
            # npm i
            npm audit fix
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:4} --delete
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["6c:7a:de:44:06:67:79:b5:50:99:0f:8e:58:6f:d3:92"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            pwd
            tar -C backend -czvf backend_artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4})
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:4}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)
            # echo OLD_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID:0:4}

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)

            echo Old Workflow Id: ${OLD_WORKFLOW_ID}
            echo Stacks available: ${STACKS}

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --region ${AWS_DEFAULT_REGION} \
              --parmeter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:4} \
              --tags project=udapeople &

            # All elements separated by spaces
            if [[ ${STACKS[@]} =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rb s3://udapeople-${OLD_WORKFLOW_ID} --force
              aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name frontend-${OLD_WORKFLOW_ID}
            else
              echo "No cloudfront to update"
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name='WorkflowID'].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow id: ${OLD_WORKFLOW_ID}
            echo Current Workflow id: ${CIRCLE_WORKFLOW_ID:0:4}

            # export OldWorkflowID="the id here"
            # export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            else:
              echo "No stacks to clean up"
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
          context: slack-context
      - deploy-infrastructure:
          context: slack-context
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
